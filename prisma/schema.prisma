generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                   Int             @id @default(autoincrement())
  title                String
  typeOfCourse         String
  contactTimeInHours   Int
  selfStudyTimeInHours Int
  workloadInHours      Int
  durationInSemester   Int             @default(1)
  courseLanguage       Language        @default(Deutsch)
  typeOfExamination    String          @default("Klausur")
  teachType            String
  ects                 Int
  code                 String
  lastOfferSemester    Semester        @default(Sommersemester)
  lastOfferYear        Int             @default(2000)
  nextOfferSemester    Semester        @default(Sommersemester)
  nextOfferYear        Int             @default(2000)
  semesterPeriod       Int             @default(0)
  contents             String
  qualificationGoals   String
  requirements         String?
  literature           String
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  assignments          Assignment[]
  lecturer             Lecturer?       @relation(fields: [lecturerId], references: [id])
  lecturerId           Int?
  courseContent        CourseContent[]
}

model CourseContent {
  id                    Int      @id @default(autoincrement())
  title                 String
  teachingMethod        String
  status                String
  creditPoints          Int
  expectedHoursPerWeek  Int
  examType              String
  examDurationInMinutes Int
  grading               String
  gradingShareInPercent Float
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  course                Course   @relation(fields: [courseId], references: [id])
  courseId              Int
}

model Lecturer {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
  User      User?
}

enum Language {
  Deutsch
  Englisch
  DeutschUndEnglisch
}

enum Semester {
  Sommersemester
  Wintersemester
  keineAngabe
}

enum Assignment {
  mandatory_cs //IMFM
  mandatory_mathematics_cs //INFM1510
  mandatory_proseminar_cs //INFM2020
  elective_practical_cs //INFM3110
  elective_theoretical_cs //INFM3410
  elective_technical_cs //INFM3310
  elective_info_cs //INFM2510

  mandatory_bio_cs //BIOINFM
  mandatory_proseminar_bio_cs //BIOINFM1510
  elective_info_bio_cs //BIOINFM2210
  elective_bioinfo_bio_cs //BIOINFM2510

  mandatory_media_cs //MEINFM
  mandatory_proseminar_media_cs //MEINFM1510
  elective_mediascience_media_cs //MEINFM2510
  elective_mediainfo_media_cs //MEINFM3220
  elective_info_media_cs //MEINFM3210

  mandatory_medic_cs //MDZINFM
  mandatory_proseminar_medic_cs //MDZINFM1510
  elective_info_medic_cs //MDZINFM2510
  elective_mediabioinf_medic_cs //MDZINFM3110

  //___MASTER___
  practical_cs_master //INFO-PRAK
  theoretical_cs_master //INFO-THEO
  technical_cs_master //INFO-TECH
  info_cs_master //INFO-INFO

  sequence_bio_cs_master //BIO-SEQ
  structure_system_bio_cs_master //BIO-STRUK
  bio_cs_master //BIO-SEM
  research_bio_cs_master //BIO-BIO
  practical_bio_cs_master //BIO-PRAK
  practical_info_bio_cs_master //INFO-PRAK
  theoretical_info_bio_cs_master //INFO-THEO
  info_bio_cs_master //INFO-INFO

  hci_media_production_media_cs_master //MEDI-HCI
  web_internet_media_cs_master //MEDI-WEB
  graphics_visual_media_cs_master //MEDI-VIS
  multimedia_tech_media_cs_master //MEDI-MMT
  media_cs_master //MEDI-MEDI
  practical_media_cs_master //MEDI-PRAX
  advanced_media_cs_info_master //MEDI-INFO
  advanced_media_cs_application_master //MEDI-APPL

  advanced_medic_cs_master //MEDZ-MEDINFO
  advanced_bio_medic_cs_master //MEDZ-BIOINFO
  research_medic_cs_master //MEDZ-RES
  medic_cs_master //MEDZ-SEM
  biomedical_medic_cs_master //MEDZ-BIOMED
  medical_tech_medic_cs_master //MEDZ-MEDTECH
  info_medic_cs_master //INFO-INFO

  basics_ml_master //ML-FOUND
  diverse_ml_master //ML-DIV
  info_ml_master //ML-CS
}

//___________________________________________________________________________________________//
//USED FOR AUTHENTICATION - DO NOT REMOVE //

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String?
  emailVerified DateTime?
  role          UserRole  @default(LECTURER)
  lecturer      Lecturer? @relation(fields: [lecturerId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lecturerId Int?     @unique
}

enum UserRole {
  ADMIN
  LECTURER
}
