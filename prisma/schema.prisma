// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id                   Int      @id @default(autoincrement())
  title                String
  typeOfCourse         String
  contactTimeInHours   Int
  selfStudyTimeInHours Int
  workloadInHours      Int
  teachType            String
  ects                 Int
  code                 String
  lastOffer            String?
  nextOffer            String
  contents             String
  qualificationGoals   String
  lecturer             String
  requirements         String?
  literature           String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  //Lecturer    Lecturer @relation(fields: [id], references: [id])
}

//___________________________________________________________________________________________//
//USED FOR AUTHENTICATION - DO NOT REMOVE //

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
